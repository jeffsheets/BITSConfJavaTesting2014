!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Testing Java Code in 2013
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Testing Java Code in 2013")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .opi-logo
      .slides
        section.index-section(data-state="index-slide")
          h1
            i.icon-coffee &nbsp; &nbsp; 
            i.icon-thumbs-up
          h2 Testing Java Code in 2013
          div Beyond JUnit w/ Hamcrest, Mockito, Spring, and Spock!
          div {by Jeff Sheets}

        section
          h1
            i.icon-github
          p These slides are up on GitHub!
          a(href="http://jeffsheets.github.io/JavaTesting2013Slides", target="_blank") jeffsheets/JavaTesting2013Slides

        section
          section
            h2 About Me
            ul
              li Java/Grails/Javascript Consultant for OPI
              li 
               i.icon-twitter &nbsp;
               a(href="https://twitter.com/sheetsj", target="_blank") @sheetsj
              li Website &nbsp;
               a(href="http://sheetsj.com/", target="_blank") http://sheetsj.com/
              li jeffsheets@gmail.com
              
        section
            h2 Objectives Assuming...
            ul
              li Spring MVC + JPA/Hibernate
              li Using Maven {
                i.icon-frown}
              li Using Eclipse/STS/GGTS or RAD {
                i.icon-frown 
                i.icon-frown}
              li We want tools newer than JUnit 3
              li Possibly use Groovy for tests (but not prod code)
              div &nbsp;
              li Please ask questions!
              span Everyone in this room is an expert!

        section
          section
            h2 Why test your code?
            ul
              li Developers -> Code
              li Senior Developers -> Code and Test
              li Chuck Norris -> continuously deploys to prod with 100% test coverage -- in COBOL &nbsp;
               i.icon-thumbs-up
          
          section
            h2 Really why test?
            ul
              li Obvious (you wouldn't be in this room otherwise)
              li Molds your testable 
               b coding style
              li Faster than redeploy-test-repeat
              li Coding with 
               b confidence
              li Continuous Deployment &nbsp;
               i.icon-sun
          section
            h3 Keep It Simple
            ul
              li Do all of your tests pass?
              li Jenkins Server (in the cloud!)
              li Test Independence
              li Not too brittle

        section
          h3 Sample App
          ul
            li Simple Domain Model for Car Maintenance
            li
             i.icon-github 
             a(href="https://github.com/jeffsheets/carmaint", target="_blank") https://github.com/jeffsheets/carmaint
            li Generated by 
             a(href="https://github.com/kolorobot/spring-mvc-quickstart-archetype", target="_blank") spring-mvc-quickstart-archetype

        section
          section
            h3 Unit vs Integration vs Functional
            ul
              li unit: JUnit+Mockito or Spock
              li int: Spring Transactional and Wiring
              li func: Geb, Selenium, Cloud...
              li Others???
              li How to separate the types?

          section
            h2 Separating Testing types - by Dir
            ul
              li src/java/main
              li src/java/test
              li src/java/integration   ???
              li src/groovy/test        ---> for spock
              li src/groovy/integration
              li 
               b Maven 
               | makes this very 
               b difficult!

          section
            h2 Separating Testing types - by File
            ul
              li MyServiceTest.java
              li MyServiceIT.java   //Maven failsafe plugin pattern
              li MyServiceSpec.groovy //Spock 
              li MyServiceSpecIT.groovy //Spock + failsafe
              li Failsafe setup in 
                a(href="https://github.com/jeffsheets/carmaint/blob/master/pom.xml", target="_blank") Pom.xml 
              

        section
          h2 Traditional JUnit
          div CarRepositoryIT.java
          pre.
            <code data-trim contenteditable>
            //Setup your Eclipse Favorites for code suggestions
            import static org.junit.Assert.assertEquals;
            
            /* ... */
            
            assertEquals(2013, result.getYear().intValue());
            assertEquals("JunitMotors", result.getMake().getName());
            assertEquals(make.getId(), result.getMake().getId());
            assertEquals(car.getDescription(), result.getDescription());
            </code>


        section
          section
            h2 Hamcrest
            div CarRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              import static org.hamcrest.Matchers.equalTo;
              import static org.hamcrest.Matchers.is;
              import static org.junit.Assert.assertThat;
            
              /* ... */
            
              assertThat(result.getYear().intValue(), is(equalTo(2013)));
              assertThat(result.getMake().getName(), is("JunitMotors"));
              assertThat(result.getMake().getId(), is(make.getId()));
              assertThat(result.getDescription(), is(car.getDescription()));
              
              //containsString
              //equalToIgnoringCase
              </code>
            
          section
            h2 Hamcrest Details
            ul
              li Readable assertions (actual before expected)
              li
                a(href="https://code.google.com/p/hamcrest/wiki/Tutorial", target="_blank") Hamcrest Docs
                div &nbsp;
              li ProviderRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              assertThat(result, not(nullValue()));
              assertThat(result, hasSize(original.size() + 1));
              
              //This requires overridden provider.equals method
              assertThat(result, hasItem(provider));
              </code>
            
          section
            h2 Custom Matchers
            ul
              li Implement Matcher interface
              span matches() and describeTo() methods
              li Use static methods for 
                b readability
              li CustomMatchers.java and PropertiesIT.java
            pre.
              <code data-trim contenteditable>
              import static com.sheetsj.test.matchers.CustomMatchers.isStringInjected;
              
              /* ... */
              
              assertThat(anotherProperty, isStringInjected());
              </code>


        section
          section
            h2 Fest
            ul
              li Fluent API for writing assertions (readability)
              li
                a(href="https://github.com/alexruiz/fest-assert-2.x/wiki/One-minute-starting-guide", target="_blank") Fest Starting Guide
                div &nbsp;
              li UserServiceTest.java
            pre.
              <code data-trim contenteditable>
              import static org.fest.assertions.Assertions.assertThat;

              /* ... */

              assertThat(demoUser.getEmail()).isEqualTo(userDetails.getUsername());
              assertThat(demoUser.getPassword()).isEqualTo(userDetails.getPassword());
              assertThat(hasAuthority(userDetails, demoUser.getRole()));
              </code>


        section
          section
            h2 Checking Thrown Exceptions
            div JUnit 4 actually provides a BAD way
            pre.
              <code data-trim contenteditable>
              //Don't copy this!
              @Test(expected=IndexOutOfBoundsException.class)
              public void testIndexOutOfBoundsException() {
                  Object a = service.getAllResults().get(2);
                  Object b = service.getAllForA(a).get(2);
              }
              </code>
          section
            h2 The Better Way
            div Use ExpectedException @Rule (UserServiceTest.java)
            pre.
              <code data-trim contenteditable>
              @Rule
              public ExpectedException thrown = ExpectedException.none();

              public void shouldThrowExceptionWhenUserNotFound() {
                thrown.expect(UsernameNotFoundException.class);
                thrown.expectMessage("not found");  //NOTE: something funny here

                when(accountRepositoryMock.findByEmail("user@example.com")).thenReturn(null);

                userService.loadUserByUsername("user@example.com");
              }
              </code>
          section
            h2 The Custom Way
            ul
             li BusinessValidationExceptionMatchers.java
             li Custom Hamcrest matchers for sourceField and arguments
            pre.
              <code data-trim contenteditable>
              public static void expect(String message, ExpectedException thrown)
              {
                thrown.expect(BusinessValidationException.class);
                thrown.expectMessage(equalTo(message));
              }
              
              /** From UserServiceTest.java */
              public void shouldThrowBusinessExceptionWhenUsernameTooShort() {
                //Uses custom expect matcher using equalTo() instead of containsString()
                expect("username", "username.too.short", thrown, "ab");

                userService.loadUserByUsername("ab");
              }
              </code>


        section
          section
            h2 Mockito Annotations
            ul
              li We've all used Mockito? JMock? Others?
              li Why? To isolate our
               u 
                 b Unit Tests!
              li Mock method return values
              li Verify mock methods were called
              li 
                strong Spy 
                | to mock method on class-under-test
          section
            h2 The Old Mockito Way
            div WorkItemServiceOldMockitoWayTest.java
            pre.
              <code data-trim contenteditable>
              private WorkItemRepository workItemRepository = mock(WorkItemRepository.class);
              private WorkItemService service = new WorkItemService(workItemRepository);

              /* .. inside a test method .. */
              when(workItemRepository.findAll()).thenReturn(allWorkItems);
              </code>
          section
            h2 The New Mockito Way
            div WorkItemServiceTest.java
            pre.
              <code data-trim contenteditable>
              @RunWith(MockitoJUnitRunner.class)
              public class WorkItemServiceTest {
                @Mock
                private WorkItemRepository workItemRepository;

                @InjectMocks
                private WorkItemService service = new WorkItemService();
              }
              </code>
          section
            h2 Those Double-Crossing Spies 
              .i.icon-meh
            ul
              li Spies are a code smell
              li But sometimes it is just easier (legacy)
            pre.
              <code data-trim contenteditable>
              @InjectMocks
              @Spy
              private WorkItemService service = new WorkItemService();

              /* ... in test method ... */
              doReturn(expectedList).when(service)
                   .selectWorkItemsByMakeAndYear("bmw", "2008", allWorkItems);

              Collection&lt;WorkItem> results = service.findAllByMakeAndYear("bmw", "2008");

              //Showing nested matchers in contains and sameInstance
              assertThat(results, contains(sameInstance(expected)));
              </code>
              
        section
          section
            h2 Conclusion
          section
            h2 References
            ul
              li
               b BIG 
               | thanks to Mike Kelly for 
               a(href="https://github.com/mrkelly/reveal-template", target="_blank") reveal.js template
              li Mrhaki Blog 
                a(href="http://mrhaki.blogspot.co.uk/2013/05/spocklight-support-for-hamcrest-matchers.html", target="_blank") for Spock
              li JavaCodeGeeks Testing 2013 
                a(href="http://www.javacodegeeks.com/2013/07/testing-web-based-spring-applications-in-2013-part-one.html", target="_blank") Blog Post

          section
            h1
              i.icon-question-sign
            h2 Questions

        section
            h3 Java Trends in 2013
            ul
              li Cloud PaaS (Heroku & Cloudfoundry/Appfog)
              li Continuous Deployment (Cloudbees & drone.io)
              li Online IDEs (codenvy and cloud9)
              li Dropwizard / Spring Boot / No-Servlet?
              li Akka async promises in Java/Scala
              li Java 8 Functional Style (next year)

    script(src="./assets/js/app.js")
