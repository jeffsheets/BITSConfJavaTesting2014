
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Testing Java Code in 2013
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Testing Java Code in 2014")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

  body
    .reveal
      .opi-logo
      .mutual
      .slides
        section.index-section(data-state="index-slide")
          h1
            i.fa.fa-coffee &nbsp; &nbsp; 
            i.fa.fa-thumbs-up
          h2 Testing Java Code in 2014
          div Beyond JUnit w/ Hamcrest, Mockito, Stored Procs, &amp; Spock!
          div {by Jeff Sheets}
          div Mutual Of Omaha BITS Conf 2014

        section
          h1
            i.fa.fa-github
          p These slides are up on GitHub!
          a(href="http://jeffsheets.github.io/BITSConfJavaTesting2014/", target="_blank") jeffsheets/BITSConfJavaTesting2014
          p Also a printable version | 
           a(href="/?print-pdf", target="_blank") Open Printable PDF

        section
          section
            h2 About Me
            ul
              li Java/Grails/Javascript Consultant for OPI
              li 
               i.fa.fa-twitter &nbsp;
               a(href="https://twitter.com/sheetsj", target="_blank") @sheetsj
              li Website &nbsp;
               a(href="http://sheetsj.com/", target="_blank") http://sheetsj.com/
              li jeffsheets@gmail.com
              
        section
            h2 Objectives Assuming...
            ul
              li Using Eclipse/STS/GGTS or RAD
              li Using Ivy
              li We want tools newer than JUnit 3
              li Possibly test with Groovy 
               i.fa.fa-heart
              div &nbsp;
              li Please ask questions!
              span Everyone in this room is an expert!

        section
          section
            h2 Why test your code?
            ul
              li Developers -> Code
              li Senior Developers -> Code and Test
              li Chuck Norris -> continuously deploys to prod with 100% test coverage -- in Assembly &nbsp;
               i.fa.fa-thumbs-up
          
          section
            h2 Really why test?
            ul
              li Obvious (you wouldn&apos;t be in this room otherwise)
              li Molds your testable 
               b coding style
              li Faster than redeploy-test-repeat
              li Coding with 
               b confidence
              li Continuous Deployment &nbsp;
               i.fa.fa-sun-o
          section
            h3 Keep It Simple
            ul
              li Do all of your tests pass?
              li Jenkins Server
              li Test Independence
              li Not too brittle

        section
          h3 Sample App
          ul
            li Simple Domain Model for Car Maintenance
            li
             i.fa.fa-github 
             a(href="https://github.com/jeffsheets/carmaint", target="_blank") https://github.com/jeffsheets/carmaint
            li Generated by 
             a(href="https://github.com/kolorobot/spring-mvc-quickstart-archetype", target="_blank") spring-mvc-quickstart-archetype

        section
          section
            h3 Unit vs Integration vs Functional
            ul
              li unit: JUnit+Mockito or Spock
              li int: Database Transactional and Wiring
              li func: Geb, Selenium, Cloud...
              li Others???
              li How to separate the types?

          section
            h2 Separating Testing types - by Dir
            ul
              li src/java/main
              li src/java/test
              li src/java/integration   ???
              li src/groovy/test        ---> for spock
              li src/groovy/integration
              li 
               b Maven 
               | makes this very 
               b difficult!

          section
            h2 Separating Testing types - by File
            ul
              li MyServiceTest.java
              li MyServiceIT.java   //Maven failsafe plugin pattern
              li MyServiceSpec.groovy //Spock 
              li MyServiceSpecIT.groovy //Spock + failsafe
              li Failsafe setup in 
                a(href="https://github.com/jeffsheets/carmaint/blob/master/pom.xml", target="_blank") Pom.xml 
              

        section
          h2 Traditional JUnit
          div CarRepositoryIT.java
          pre.
            <code data-trim contenteditable>
            //Setup your Eclipse Favorites for code suggestions
            import static org.junit.Assert.assertEquals;
            
            /* ... */
            
            assertEquals(2013, result.getYear().intValue());
            assertEquals("JunitMotors", result.getMake().getName());
            assertEquals(make.getId(), result.getMake().getId());
            assertEquals(car.getDescription(), result.getDescription());
            </code>


        section
          section
            h2 Hamcrest
            div CarRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              import static org.hamcrest.Matchers.equalTo;
              import static org.hamcrest.Matchers.is;
              import static org.junit.Assert.assertThat;
            
              /* ... */
            
              assertThat(result.getYear().intValue(), is(equalTo(2013)));
              assertThat(result.getMake().getName(), is("JunitMotors"));
              assertThat(result.getMake().getId(), is(make.getId()));
              assertThat(result.getDescription(), is(car.getDescription()));
              
              //containsString
              //equalToIgnoringCase
              </code>
            
          section
            h2 Hamcrest Details
            ul
              li Readable assertions (actual before expected)
              li
                a(href="https://code.google.com/p/hamcrest/wiki/Tutorial", target="_blank") Hamcrest Docs
                div &nbsp;
              li ProviderRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              assertThat(result, not(nullValue()));
              assertThat(result, hasSize(original.size() + 1));
              
              //This requires overridden provider.equals method
              assertThat(result, hasItem(provider));
              </code>
            
          section
            h2 Custom Matchers
            ul
              li Implement Matcher interface
              span matches() and describeTo() methods
              li Use static methods for 
                b readability
              li CustomMatchers.java and PropertiesIT.java
            pre.
              <code data-trim contenteditable>
              import static com.sheetsj.test.matchers.CustomMatchers.isStringInjected;
              
              /* ... */
              
              assertThat(anotherProperty, isStringInjected());
              </code>


        section
          section
            h2 Fest
            ul
              li Fluent API for writing assertions (readability)
              li
                a(href="https://github.com/alexruiz/fest-assert-2.x/wiki/One-minute-starting-guide", target="_blank") Fest Starting Guide
                div &nbsp;
              li UserServiceTest.java
            pre.
              <code data-trim contenteditable>
              import static org.fest.assertions.Assertions.assertThat;

              /* ... */

              assertThat(demoUser.getEmail()).isEqualTo(userDetails.getUsername());
              assertThat(demoUser.getPassword()).isEqualTo(userDetails.getPassword());
              assertThat(hasAuthority(userDetails, demoUser.getRole()));
              </code>


        section
          section
            h2 Checking Thrown Exceptions
            div JUnit 4 actually provides a BAD way
            pre.
              <code data-trim contenteditable>
              //Don't copy this!
              @Test(expected=IndexOutOfBoundsException.class)
              public void testIndexOutOfBoundsException() {
                  Object a = service.getAllResults().get(2);
                  Object b = service.getAllForA(a).get(2);
              }
              </code>
          section
            h2 The Better Way
            div Use ExpectedException @Rule (UserServiceTest.java)
            pre.
              <code data-trim contenteditable>
              @Rule
              public ExpectedException thrown = ExpectedException.none();

              public void shouldThrowExceptionWhenUserNotFound() {
                thrown.expect(UsernameNotFoundException.class);
                thrown.expectMessage("not found");  //NOTE: does a contains()

                when(accountRepositoryMock.findByEmail("user@example.com"))
                  .thenReturn(null);

                userService.loadUserByUsername("user@example.com");
              }
              </code>
          section
            h2 The Custom Way
            ul
             li BusinessValidationExceptionMatchers.java
             li Custom Hamcrest matchers for sourceField and arguments
            pre.
              <code data-trim contenteditable>
              public static void expect(String sourceField, String message, 
                                        ExpectedException thrown, Object... args)
              {
                thrown.expect(BusinessValidationException.class);
                thrown.expectMessage(equalTo(message));
                thrown.expect(hasSourceField(sourceField));
                thrown.expect(containsArguments(args));
              }
              
              /** From UserServiceTest.java */
              public void shouldThrowBusinessExceptionWhenUsernameTooShort() {
                //Uses custom expect matcher using equalTo() instead of containsString()
                expect("username", "username.too.short", thrown, "ab");

                userService.loadUserByUsername("ab");
              }
              </code>


        section
          section
            h2 Mockito Annotations
            ul
              li Experience with Mockito? JMock? Others?
              li Why? To isolate our
               u 
                 b Unit Tests!
              li Mock method return values
              li Verify mock methods were called
              li 
                strong Spy 
                | to mock method on class-under-test
          section
            h2 The Old Mockito Way
            div WorkItemServiceOldMockitoWayTest.java
            pre.
              <code data-trim contenteditable>
              private WorkItemRepository workItemRepo = mock(WorkItemRepository.class);
              private WorkItemService service = new WorkItemService(workItemRepo);

              /* .. inside a test method .. */
              when(workItemRepo.findAll()).thenReturn(allWorkItems);
              </code>
          section
            h2 The New Mockito Way
            div WorkItemServiceTest.java
            pre.
              <code data-trim contenteditable>
              @RunWith(MockitoJUnitRunner.class)
              public class WorkItemServiceTest {
                @Mock
                private WorkItemRepository workItemRepository;

                @InjectMocks
                private WorkItemService service = new WorkItemService();
              }
              </code>
          section
            h2 Those Double-Crossing Spies 
              .i.fa.fa-meh-o
            ul
              li Spies are a code smell
              li But sometimes it is just easier (legacy)
            pre.
              <code data-trim contenteditable>
              @InjectMocks
              @Spy
              private WorkItemService service = new WorkItemService();

              /* ... in test method ... */
              doReturn(expectedList).when(service)
                   .selectWorkItemsByMakeAndYear("bmw", "2008", allWorkItems);

              Collection&lt;WorkItem> results = service.findAllByMakeAndYear("bmw", "2008");

              //Showing nested matchers in contains and sameInstance
              assertThat(results, contains(sameInstance(expected)));
              </code>


        section
          section
            h2 Database Integration Tests
            ul
              li Are you testing your ORM/SQL?
              li How about Stored Procedures?
              li Web Service Client calls?
          section
            h2 Transactional Tests
            b Auto-rollback from real database!
            div IntegrationTestBaseClass.java
            pre.
              <code data-trim contenteditable>
              @ContextConfiguration(loader=AnnotationConfigContextLoader.class, 
                           classes={RootConfig.class, PersistenceConfig.class})
              @ActiveProfiles("test")
              public abstract class IntegrationTestBaseClass extends 
                                AbstractTransactionalJUnit4SpringContextTests {

              }
              </code>
          section
            h2 Transactional Tests 2
            div Test now talks to real DB
            small WorkItemRepositoryIT.java
            pre.
              <code data-trim contenteditable>
              public class WorkItemRepositoryIT extends IntegrationTestBaseClass {
                List&lt;WorkItem> original = workItemRepository.findAll();

                Manufacturer make = manufacturerRepository.save(
                                      new Manufacturer("JUnitMake"));
                Car car = carRepository.save(
                          new Car(2013, make, "JunitModel", "LT FWD 3.6L V6 DOHC 24V"));
                Provider provider = providerRepository.save(
                                      new Provider("Junit Tire Shop", "Shadow Lake"));

                WorkItem workItem = new WorkItem(car, new Date(), "Oil Change", provider, 
                               18123L, 60.12, "Took 1:45 so got free oil change coupon");
                workItem = workItemRepository.save(workItem);

                List&lt;WorkItem> result = workItemRepository.findAll();
              }
              </code>
          section
            h2 Stored Procedure Testing
            ul
              li details here
            pre.
              <code data-trim contenteditable>
              //TODO: this code
              </code>


        section
          section
            h2 Spock Testing Framework
            ul
              li "The Enterprise Ready Specification Framework"
                .i.fa.fa-rocket
              li Yes, Spock is Groovy
              li Great for testing Java code!
              li Read the 
               a(href="http://code.google.com/p/spock/wiki/SpockBasics", target="_blank") Intro Docs
              li IANASE (I Am Not A Spock Expert)
          section
            h2 Spock Setup
            ul
              li Mrhaki Blog post
               a(href="http://mrhaki.blogspot.fr/2011/01/spocklight-add-spock-support-to-java.html", target="_blank") Setup Spock in Eclipse
              li 1) Setup Groovy and Spock in Pom.xml
               div Dependencies and Plugins
            pre.
              <code data-trim contenteditable>
              &lt;properties>
                &lt;spock.version>0.7-groovy-2.0&lt;/spock.version>
                &lt;groovy.version>2.0.7&lt;/groovy.version>
              &lt;/properties>
              </code>
          section
            h2 Spock Setup 2
            ul
              li 2) Build Path for src/test/groovy
              li 3) Output Folder for src/test/groovy
              li 4) Profit???

        section
          section
            h2 Spock Test Code
            div Basic Layout
            pre.
              <code data-trim contenteditable>
              class WorkItemServiceSpecTest extends Specification {
                def service = new WorkItemService()
                def "getYearAsString works for simple case"() {
                  given: 'a normal date'
                  def date = Date.parse("MM/dd/yyyy", "08/01/2013")

                  when: 'getYearAsString is called'
                  def result = service.getYearAsString(date)

                  then: 'year is correct on result'
                  result == "2013"
                }
              }
              </code>
          section
            h2 Expect: for functional code
            pre.
              <code data-trim contenteditable>
              def "getYearAsString works for simple case using expect block"() {
                given: 'a normal date'
                def date = Date.parse("MM/dd/yyyy", "08/01/2013")

                expect: 'getYearAsString is correct when called'
                service.getYearAsString(date) == "2013"
              }
              </code>
          section
            h2 Spock Mocks Setup
            pre.
              <code data-trim contenteditable>
              class WorkItemServiceSpecTest extends Specification {
                def service = new WorkItemService()
                def workItemRepository = Mock(WorkItemRepository)
                def setup() {
                  service.workItemRepository = workItemRepository
                }
              }
              </code>
          section
            h2 Spock Mocks - Simple
            pre.
              <code data-trim contenteditable>
              def "findAllByMakeAndYear works with mocks"() {
                given: 'a bunch of work items'
                List&lt;WorkItem> allWorkItems = buildAllWorkItems()

                when: 'findAllByMakeAndYear is called'
                def results = service.findAllByMakeAndYear('ford', '2013')

                then: 'results are correct'
                1 * workItemRepository.findAll() >> allWorkItems
                results.containsAll allWorkItems[2,4]
              }
              </code>
          section
            h2 Spock Mocks - Wildcard _
            pre.
              <code data-trim contenteditable>
              /** not a good pattern. just showing it is possible */
              def "findAllByMakeAndYear with many tests at once"() {
                given: 'a bunch of work items'
                List&lt;WorkItem> allWorkItems = buildAllWorkItems()
                _ * workItemRepository.findAll() >> allWorkItems

                expect: 'findAllByMakeAndYear is called and has correct results'
                service.findAllByMakeAndYear('ford', '2013').containsAll(
                   allWorkItems[2,4])
                service.findAllByMakeAndYear('ford', '2012').containsAll(
                   allWorkItems[0..1])
                service.findAllByMakeAndYear('chevy', '2013').empty
                !service.findAllByMakeAndYear('ford', '2014')
              }
              </code>
          section
            h2 Spock - Multiple when/then
            pre.
              <code data-trim contenteditable>def "findAllByMakeAndYear with many tests at once but multiple blocks"() {
                given: 'a bunch of work items'
                List<WorkItem> allWorkItems = buildAllWorkItems()

                when: 'findAllByMakeAndYear is called for Ford and 2013'
                def results = service.findAllByMakeAndYear('ford', '2013')

                then: 'results are correct'
                1 * workItemRepository.findAll() >> allWorkItems
                results.containsAll allWorkItems[2,4]

                when: 'findAllByMakeAndYear is called for Ford and 2012'
                results = service.findAllByMakeAndYear('ford', '2012')

                then: 'results are correct'
                1 * workItemRepository.findAll() >> allWorkItems
                results.containsAll allWorkItems[0..1]
              }
              </code>
          section
            h2 Spock @Unroll Magic FTW!
            ul
             li Wow. Killer Feature! &nbsp; &nbsp; 
               .i.fa.fa-magic
             li Parameterized Tests (anyone doing JUnit style?)
            pre.
              <code data-trim contenteditable>
              @Unroll
              def "getYearAsString with #inputDate returns #result"
                                              (String inputDate, String result) {
                expect: 'getYearAsString is correct when called'
                service.getYearAsString(
                            Date.parse("MM/dd/yyyy", inputDate)) == result

                where:
                inputDate    | result
                "01/01/1999" | "1999"
                "02/01/2000" | "2000"
                "03/01/199"  | "199"
                '03/01/2013' | '2013'	
              }
              </code>
          section
            h2 Spock Support
            ul
             li Spock modules for Guice, Grails, Spring, etc
             li Setup Transaction rollbacks
             li WorkItemRepositorySpecIT.groovy
            pre.
              <code data-trim contenteditable>
              //Spring example
              @ContextConfiguration(loader=AnnotationConfigContextLoader, 
                                    classes=[RootConfig, PersistenceConfig])
              @Transactional
              abstract class IntegrationSpecBaseClass extends Specification {
              }
              </code>
          section
            h2 Spock + Hamcrest?
            i.fa.fa-check &nbsp; 
             | Yes it can be done (that() and expect())
            pre.
              <code data-trim contenteditable>
                expect: 'findAllByMakeAndYear returns correct results'
                that(result1, containsInAnyOrder(allWorkItems[2], allWorkItems[4]))
                that(result2, containsInAnyOrder(allWorkItems[0], allWorkItems[1]))
                that(result3, empty())
                that(result4, empty())
              </code>
          section
            h2 Spock + Hamcrest? &nbsp;
             i.fa.fa-thumbs-down
            div But groovy is usually easier
            pre.
              <code data-trim contenteditable>
              expect: 'findAllByMakeAndYear returns correct results'
              result1.containsAll allWorkItems[2,4]
              result2.containsAll(allWorkItems[0..1])
              result3.empty
              !result4
              </code>
          section
            h2 Spock Miscellaneous
            ul
             li thrown() and notThrown()
             li setup() and cleanup()
             li setupSpec() and cleanupSpec()
             li @Ignore, @IgnoreRest, @Timeout, @FailsWith
             li where: using simple arrays instead of tables
             li 
              a(href="https://code.google.com/p/spock/wiki/SpockBasics", target="_blank") SpockBasics
          section
            h2 Spock vs JUnit+Mockito+Hamcrest
            ul
             li Spock gives you power of Groovy
             li I prefer readability of Spock Specs
             li Opinions? Thoughts? Spock Questions?


        section
          section
            h2 Testing REST Clients
            ul
             li Use groovy
            pre.
              <code data-trim contenteditable>
              //TODO: code here
              </code>
                
              
        section
          section
            h2 Conclusion
          section
            h2 References
            ul
              li TODO: SVN Repo of code examples
              li Mrhaki Blog 
                a(href="http://mrhaki.blogspot.co.uk/2013/05/spocklight-support-for-hamcrest-matchers.html", target="_blank") for Spock
              li JavaCodeGeeks Testing 2013 
                a(href="http://www.javacodegeeks.com/2013/07/testing-web-based-spring-applications-in-2013-part-one.html", target="_blank") Blog Post

          section
            h1
              i.fa.fa-question-circle
            h2 Questions

    script(src="./assets/js/app.js")
